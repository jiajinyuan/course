<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.2//EN" "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
 
 
<module name="Checker"> 
    
    <property name="charset" value="UTF-8"/>   
    <property name="severity" value="warning"/>
    
    <!-- Checks for Size Violations.  --> 
    <!-- 检查文件的长度（行） default max=2000 --> 
    <module name="FileLength">         
     <property name="max" value="3500"/>        
  </module>  
  
    
  <module name="TreeWalker">
    
    <!-- Checks for imports    -->               
    <!-- 必须导入类的完整路径，即不能使用*导入所需的类 -->  
    <module name="AvoidStarImport"/>  
    
    <!-- 检查是否从非法的包中导入了类 illegalPkgs: 定义非法的包名称-->  
    <module name="IllegalImport"/>
    
    <!-- 检查是否导入了不必显示导入的类-->  
    <module name="RedundantImport"/>  
    
    <!-- 检查是否导入的包没有使用-->  
    <module name="UnusedImports"/>
    
    <!-- 检查类和接口的javadoc 默认不检查author 和version tags       
      authorFormat: 检查author标签的格式
            versionFormat: 检查version标签的格式
            scope: 可以检查的类的范围，例如：public只能检查public修饰的类，private可以检查所有的类
            excludeScope: 不能检查的类的范围，例如：public，public的类将不被检查，但访问权限小于public的类仍然会检查，其他的权限以此类推
            tokens: 该属性适用的类型，例如：CLASS_DEF,INTERFACE_DEF -->
    <module name="JavadocType">  
        <property name="authorFormat" value="\S"/>  
      <property name="scope" value="protected"/>        
      <property name="tokens" value="CLASS_DEF,INTERFACE_DEF"/>  
    </module>
    
    <!-- 检查方法的javadoc的注释
            scope: 可以检查的方法的范围，例如：public只能检查public修饰的方法，private可以检查所有的方法
            allowMissingParamTags: 是否忽略对参数注释的检查
            allowMissingThrowsTags: 是否忽略对throws注释的检查
            allowMissingReturnTag: 是否忽略对return注释的检查 -->
    <module name="JavadocMethod">  
       <property name="scope" value="private"/>  
      <property name="allowMissingParamTags" value="false"/>  
      <property name="allowMissingThrowsTags" value="false"/>  
      <property name="allowMissingReturnTag" value="false"/>  
      <property name="tokens" value="METHOD_DEF"/>  
      <property name="allowUndeclaredRTE" value="true"/>  
      <property name="allowThrowsTagsForSubclasses" value="true"/>  
      <!--允许get set 方法没有注释-->
      <property name="allowMissingPropertyJavadoc" value="true"/>
    </module>  
        
    <!-- 检查类变量的注释
            scope: 检查变量的范围，例如：public只能检查public修饰的变量，private可以检查所有的变量 -->    
    <module name="JavadocVariable">  
      <property name="scope" value="private"/>  
    </module>  
        
    <!--option: 定义左大括号'{'显示位置，eol在同一行显示，nl在下一行显示  
      maxLineLength: 大括号'{'所在行行最多容纳的字符数  
      tokens: 该属性适用的类型，例：CLASS_DEF,INTERFACE_DEF,METHOD_DEF,CTOR_DEF -->  
    <module name="LeftCurly">
        <property name="option" value="eol"/>
    </module>
     
    <!-- NeedBraces 检查是否应该使用括号的地方没有加括号  
      tokens: 定义检查的类型 -->  
    <module name="NeedBraces"/>  
    
    <!-- Checks the placement of right curly braces ('}') for  else, try, and catch tokens. The policy to verify is specified using property  option.   
      option: 右大括号是否单独一行显示  
      tokens: 定义检查的类型  -->  
<!--    <module name="RightCurly">-->
<!--        <property name="option" value="alone"/>     -->
<!--    </module>-->
    <!--检查右花括号的位置（'}'）-->
    <module name="RightCurly">
      <property name="id" value="RightCurlySame" />
      <property name="tokens"
                value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO" />
    </module>
    <module name="RightCurly">
      <property name="id" value="RightCurlyAlone" />
      <property name="option" value="alone" />
      <property name="tokens"
                value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT" />
    </module>
        
    <!-- 检查在重写了equals方法后是否重写了hashCode方法 --> 
    <module name="EqualsHashCode"/>
        
    <module name="IllegalInstantiation">  
        <property name="classes" value="java.lang.Boolean"/>  
    </module>
    
    <!-- Checks for Naming Conventions.   命名规范   -->
    <!-- local, final variables, including catch parameters -->
    <module name="LocalFinalVariableName"/>
    
    <!-- local, non-final variables, including catch parameters--> 
    <module name="LocalVariableName"/>
    
    <!-- static, non-final fields -->
    <module name="StaticVariableName">
        <property name="format" value="(^[A-Z0-9_]{0,39}$)"/>
    </module>  
    
    <!-- packages -->
    <module name="PackageName" >
        <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
    </module> 
     
    <!-- classes and interfaces -->
    <module name="TypeName">  
        <property name="format" value="(^[A-Z][a-zA-Z0-9]{0,39}$)"/>
    </module>
    
    <!-- methods -->  
    <module name="MethodName">          
      <property name="format" value="(^[a-z][a-zA-Z0-9]{0,39}$)"/>
    </module> 
    
    <!-- non-static fields -->
    <module name="MemberName">  
        <property name="format" value="(^[a-z][a-z0-9][a-zA-Z0-9]{0,39}$)"/>
    </module>
    
    <!-- parameters -->
    <module name="ParameterName">
        <property name="format" value="(^[a-z][a-zA-Z0-9_]{0,39}$)"/>
    </module>
    
    <!-- constants (static,  final fields) -->
    <module name="ConstantName"> 
        <property name="format" value="(^[A-Z0-9_]{0,39}$)"/>
    </module>
    
    <!-- 代码缩进   -->
    <module name="Indentation">        
    </module>
    
    <!--  Checks that long constants are defined with an upper ell. That is ' L' and not 'l'. This is in accordance to the Java Language Specification,  Section 3.10.1.  
      检查是否在long类型是否定义了大写的L.字母小写l和数字1（一）很相似。  
      looks a lot like 1. -->  
    <module name="UpperEll"/>
    
    <!--  Checks that switch statement has "default" clause. 检查switch语句是否有‘default’从句  
       Rationale: It's usually a good idea to introduce a default case in every switch statement. 
       Even if the developer is sure that all currently possible cases are covered, this should be expressed in the default branch,
        e.g. by using an assertion. This way the code is protected aginst later changes, e.g. introduction of new types in an enumeration type. --> 
    <module name="MissingSwitchDefault"/> 
    
    <!--检查switch中case后是否加入了跳出语句，例如：return、break、throw、continue -->
    <module name="FallThrough"/>  
    
    <!-- Checks the number of parameters of a method or constructor. max default 7个. -->    
    <module name="ParameterNumber">      
      <property name="max" value="5"/>              
    </module>
    
    <!-- 每行字符数 -->    
    <module name="LineLength">  
      <property name="max" value="200"/>       
    </module>  
    
    <!-- Checks for long methods and constructors. max default 150行. max=300 设置长度300 --> 
    <module name="MethodLength">  
      <property name="max" value="500"/>                 
    </module>        
    
    <!-- ModifierOrder 检查修饰符的顺序，默认是 public,protected,private,abstract,static,final,transient,volatile,synchronized,native -->  
    <module name="ModifierOrder">          
    </module>      
    
    <!-- 检查是否有多余的修饰符，例如：接口中的方法不必使用public、abstract修饰  -->
    <module name="RedundantModifier">       
    </module>
    
    <!--- 字符串比较必须使用 equals() -->   
    <module name="StringLiteralEquality">          
    </module> 
    
    <!-- if-else嵌套语句个数 最多4层 -->
    <module name="NestedIfDepth">        
      <property name="max" value="4"/> 
    </module>  
    
    <!-- try-catch 嵌套语句个数 最多2层 -->
    <module name="NestedTryDepth">  
      <property name="max" value="3"/>
    </module>  
        
    <!-- 返回个数 -->   
    <module name="ReturnCount">        
      <property name="max" value="8"/>
      <property name="format" value="^$"/>          
    </module>                  
  
  </module>
  
</module>
